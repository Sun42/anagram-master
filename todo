# ETAPE 1 Choix Algo/solution 
Solution1 : 
generer toutes les permutations possibles pour le mot en paramètre puis verifier si lapermutation existe dans le dico
- : la génération des permutations 'imparfaites' peut etre complexe dans l'exercice 2 
- : complexité temporelle Nombre de codes possibles avec N chars en base B pour un DICO de D words (O)B^N * D
- : contrainte de temps ?: pas sur

Solution 2:
on parcours chaque mot du dico, pour chaque mot du dico on vérifie que c'est un anagram
+ : complexité temporelle/temps d'execution (0) D
+ : s'adapte bien à la résolution de l'exercice 2, pour chaque mot on vérifie si c'est un anagramme imparfait en nombre de lettres qui matchs
+ : contrainte de temps: ok

# ETAPE 2 DECOMPOSER en sous tâches
    [x] usage et gestions des params
    [x] ex1: faire fonction isAnagram(s1, s2) : bool
        [x] faire fonction charsCounter
    [ ] open file get words tab (opti grouper les mots par leur taille)
    [ ] ex2: faire fonction isAnagram(s1, s2, nb) : bool

## TDD isAnagramPerfect
[x] error argument 1 null ou vide => false
[x] error argument 2 null ou vide => false
[x] test s1 et s2 pas la même taille => doit retourner false
[x] test s1 et s2 même taille et strictement identique => doit retourner false
[] autres tests OK
[] autres tests KO
[] penser au cas '-'

## TDD letter counter
